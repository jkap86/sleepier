import { Plugin, Tracer, Metrics } from "./interfaces";
import Hook from "require-in-the-middle";
declare type InstrumentedModule = {
    name: string;
    hook: Hook;
};
/**
 * The Instrumentation class.
 * @class
 */
export declare class Instrumentation {
    #private;
    active: InstrumentedModule[];
    constructor(tracer: Tracer, meter: Metrics);
    /**
     * Loads custom instrumentation for a given module. The instrumentation is
     * loaded when a modules is required using the global `require` function.
     */
    load<T>(name: string, fn: (module: T, tracer: Tracer, meter: Metrics) => Plugin<T>): void;
    /**
     * Removes all custom instrumentation for a given module name. Any
     * subsequent calls to `require` for this instrumentation after calling
     * this method will not include instrumentation.
     */
    unload(name: string): void;
    /**
     * Removes all custom instrumentation. Any subsequent calls to `require`
     * after calling this method will not include instrumentation.
     */
    unloadAll(): void;
}
export {};
