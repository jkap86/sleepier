"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initCoreProbes = exports.initCorePlugins = void 0;
const tslib_1 = require("tslib");
const http_1 = require("./instrumentation/http");
const client_1 = require("./client");
const pgPlugin = tslib_1.__importStar(require("./instrumentation/pg"));
const redisPlugin = tslib_1.__importStar(require("./instrumentation/redis"));
const gcProbe = tslib_1.__importStar(require("./probes/v8"));
/**
 * Initialises all the available core instrumentation.
 *
 * "Core instrumentation" is things that we can hook into automatically
 * at runtime via monkeypatching an instance of a node module. This can
 * include parts of node's standard library.
 */
function initCorePlugins(instrumentation, { instrumentationConfig }) {
    let plugins = [http_1.httpPlugin, http_1.httpsPlugin, redisPlugin, pgPlugin];
    // Do not load disabled instrumentation plugins
    if (instrumentationConfig) {
        plugins = plugins.filter(plugin => instrumentationConfig[plugin.PLUGIN_NAME] !== false);
    }
    // load plugins
    plugins.forEach(({ PLUGIN_NAME, instrument }) => {
        try {
            instrumentation.load(PLUGIN_NAME, instrument);
        }
        catch (e) {
            client_1.BaseClient.logger.warn(`Failed to instrument "${PLUGIN_NAME}": ${e.message}`);
        }
    });
}
exports.initCorePlugins = initCorePlugins;
/**
 * Initialises all the available probes to attach automatically at runtime.
 */
function initCoreProbes(meter) {
    const probes = [gcProbe];
    // load probes
    probes.forEach(({ PROBE_NAME, init }) => meter.probes().register(PROBE_NAME, init(meter)));
}
exports.initCoreProbes = initCoreProbes;
