"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.instrument = exports.PLUGIN_NAME = void 0;
const tslib_1 = require("tslib");
const shimmer_1 = tslib_1.__importDefault(require("shimmer"));
exports.PLUGIN_NAME = "redis";
function wrapCallback(tracer, span, done) {
    // @TODO: add results to span here?
    const fn = function (err, res) {
        if (err)
            tracer.setError(err);
        span.close();
        if (done) {
            done(err, res);
        }
    };
    return tracer.wrap(fn);
}
function createRedisSendCommandWrapper(tracer) {
    return function internalSendCommandWrap(original) {
        return function wrapRedisSendCommand(cmd, args, cb) {
            var _a;
            const rootSpan = tracer.currentSpan();
            if (!rootSpan || !cmd) {
                return original.apply(this, [cmd, args, cb]);
            }
            const span = rootSpan
                .child()
                // yikes, had to override the typechecker here :/
                .setName(`Redis query to ${(_a = this.address) !== null && _a !== void 0 ? _a : "[unknown]"}`)
                .setCategory("query.redis");
            typeof cmd === "string"
                ? span.set("appsignal:body", cmd)
                : span.set("appsignal:body", cmd.command);
            if (arguments.length === 1 && typeof cmd === "object") {
                cmd.callback = wrapCallback(tracer, span, cmd.callback);
                return original.call(this, cmd);
            }
            if (!cmd ||
                !args ||
                typeof cmd !== "string" ||
                !Array.isArray(args) ||
                (cb && typeof cb !== "function")) {
                return original.apply(this, [cmd, args, cb]);
            }
            if (!cb) {
                if (typeof args[args.length - 1] === "function" ||
                    typeof args[args.length - 1] === "undefined") {
                    cb = args.pop();
                }
            }
            return original.apply(this, [cmd, args, wrapCallback(tracer, span, cb)]);
        };
    };
}
const instrument = (mod, tracer) => ({
    version: "~3",
    install() {
        shimmer_1.default.wrap(mod.RedisClient.prototype, "internal_send_command", createRedisSendCommandWrapper(tracer));
        return mod;
    },
    uninstall() {
        shimmer_1.default.unwrap(mod.RedisClient.prototype, "internal_send_command");
    }
});
exports.instrument = instrument;
