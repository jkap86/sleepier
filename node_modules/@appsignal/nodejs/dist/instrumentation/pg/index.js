"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.instrument = exports.PLUGIN_NAME = void 0;
const tslib_1 = require("tslib");
const shimmer_1 = tslib_1.__importDefault(require("shimmer"));
const events_1 = require("events");
const patches_1 = require("./patches");
exports.PLUGIN_NAME = "pg";
const instrument = (mod, tracer) => ({
    version: ">= 7.0.0",
    install() {
        shimmer_1.default.wrap(mod.Client.prototype, "query", original => {
            return function wrapPgQuery(...args) {
                const rootSpan = tracer.currentSpan();
                if (!rootSpan) {
                    return original.apply(this, args);
                }
                const span = rootSpan.child();
                span.setCategory("sql.postgres").setName("Query");
                let returned;
                if (args.length >= 1) {
                    const queryObj = args[0];
                    // extract query
                    if (typeof queryObj === "object") {
                        if (queryObj.text) {
                            span.setSQL(queryObj.text);
                        }
                    }
                    else if (typeof queryObj === "string") {
                        span.setSQL(queryObj);
                    }
                    const callback = args[args.length - 1];
                    // handle callback method signature
                    if (typeof callback === "function") {
                        args[args.length - 1] = patches_1.patchCallback(tracer, span, callback);
                    }
                    else if (typeof args[0] === "object") {
                        // handle callback method signature
                        patches_1.patchSubmittable(tracer, span, queryObj);
                    }
                    returned = original.apply(this, args);
                }
                else {
                    returned = original.apply(this, args);
                }
                if (returned) {
                    if (returned instanceof events_1.EventEmitter) {
                        tracer.wrapEmitter(returned);
                    }
                    else if (typeof returned.then === "function") {
                        returned = patches_1.patchPromise(tracer, span, returned);
                    }
                }
                return returned;
            };
        });
        return mod;
    },
    uninstall() {
        shimmer_1.default.unwrap(mod.Client.prototype, "query");
    }
});
exports.instrument = instrument;
