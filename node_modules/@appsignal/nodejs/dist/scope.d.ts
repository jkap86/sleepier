/**
 * Uses portions of `opentelemetry-js`
 * https://github.com/open-telemetry/opentelemetry-js/blob/master/packages/opentelemetry-scope-async-hooks/src/AsyncHooksScopeManager.ts
 * Copyright 2019, OpenTelemetry Authors
 *
 * Uses portions of `cloud-trace-nodejs`
 * https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/cls/async-hooks.ts
 * Copyright 2018, Google LLC
 */
/// <reference types="node" />
import { Func } from "@appsignal/types";
import { Span } from "./interfaces/span";
import { EventEmitter } from "events";
/**
 * Propagates specific scope between function calls and async operations.
 *
 * @class
 */
export declare class ScopeManager {
    #private;
    constructor();
    /**
     * Enables the async hook.
     */
    enable(): this;
    /**
     * Disables the async hook and clears the current `Span`s. Will generally
     * only need to be called by the test suite.
     */
    disable(): this;
    private setActive;
    /**
     * Unset any active span for the current executionAsyncId.
     */
    private unsetActive;
    /**
     * Returns the current active `Span`.
     */
    active(): Span | undefined;
    /**
     * Sets the root `Span`
     */
    setRoot(rootSpan: Span): void;
    root(): Span | undefined;
    private removeSpanForUid;
    /**
     * Executes a given function within the context of a given `Span`.
     */
    withContext<T>(span: Span, fn: (s: Span) => T): T;
    bindContext<T>(fn: Func<T>): Func<T>;
    emitWithContext(ee: EventEmitter): void;
}
