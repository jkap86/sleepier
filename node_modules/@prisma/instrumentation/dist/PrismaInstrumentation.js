"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PrismaInstrumentation_exports = {};
__export(PrismaInstrumentation_exports, {
  PrismaInstrumentation: () => PrismaInstrumentation
});
module.exports = __toCommonJS(PrismaInstrumentation_exports);
var import_instrumentation = require("@opentelemetry/instrumentation");
var import_constants = require("./constants");
class PrismaInstrumentation extends import_instrumentation.InstrumentationBase {
  constructor(config = {}) {
    super(import_constants.NAME, import_constants.VERSION, config);
  }
  init() {
    const module2 = new import_instrumentation.InstrumentationNodeModuleDefinition(import_constants.MODULE_NAME, [import_constants.VERSION]);
    return [module2];
  }
  enable() {
    const config = this._config;
    const globalValue = {
      middleware: config.middleware
    };
    global[import_constants.GLOBAL_KEY] = globalValue;
  }
  disable() {
    delete global[import_constants.GLOBAL_KEY];
  }
  isEnabled() {
    return Boolean(global[import_constants.GLOBAL_KEY]);
  }
}
__name(PrismaInstrumentation, "PrismaInstrumentation");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PrismaInstrumentation
});
